name: 'Terraform CI/CD'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    # Use the Bash shell
    defaults:
      run:
        shell: bash
        working-directory: ./environments/dev

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    # Create Lambda layer
    - name: Create Lambda layer
      run: |
        cd ../../modules/compute/src
        mkdir -p python/lib/python3.9/site-packages
        pip install -r requirements.txt -t python/lib/python3.9/site-packages
        zip -r lambda_layer.zip python
        cd ../../../environments/dev
      
    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0

    # Initialize a new or existing Terraform working directory
    - name: Terraform Init
      run: terraform init
      
    # Check that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -recursive
      
    # Validate Terraform configurations
    - name: Terraform Validate
      run: terraform validate
      
    # Generate plan for changes in pull requests
    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
    # Apply Terraform plan to deploy infrastructure (only on main branch push)
    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}